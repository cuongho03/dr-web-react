{"ast":null,"code":"import queryString from 'query-string';\nexport const getQueryString = query => {\n  const result = queryString.stringify(query);\n  if (!result) return '';\n  return `?${result}`;\n};\nexport const debounced = (delay, fn) => {\n  let timerId;\n  return (...args) => {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n\n    timerId = setTimeout(() => {\n      fn(...args);\n      timerId = null;\n    }, delay);\n  };\n};\nexport const capitalizeFirstLetter = stringText => {\n  return stringText.charAt(0).toUpperCase() + stringText.slice(1);\n};\nexport const getParameterByName = (name, url) => {\n  if (!url) url = ''; // eslint-disable-next-line\n\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  let regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n      results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};\nexport const isEquivalent = (a, b) => {\n  // Create arrays of property names\n  let aProps = Object.getOwnPropertyNames(a);\n  let bProps = Object.getOwnPropertyNames(b); // If number of properties is different,\n  // objects are not equivalent\n\n  if (aProps.length !== bProps.length) {\n    return false;\n  }\n\n  for (let i = 0; i < aProps.length; i++) {\n    let propName = aProps[i]; // If values of same property are not equal,\n    // objects are not equivalent\n\n    if (a[propName] !== b[propName]) {\n      return false;\n    }\n  } // If we made it this far, objects\n  // are considered equivalent\n\n\n  return true;\n};\nexport const objectToFormData = (obj, form, namespace) => {\n  let fd = form || new FormData();\n  let formKey; // eslint-disable-next-line\n\n  for (let property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      if (namespace) {\n        formKey = namespace + '[' + property + ']';\n      } else {\n        formKey = property;\n      }\n\n      if (typeof obj[property] === 'object' && // eslint-disable-next-line no-undef\n      !(obj[property] instanceof File)) {\n        objectToFormData(obj[property], fd, property);\n      } else {\n        fd.append(formKey, obj[property]);\n      }\n    }\n  }\n\n  return fd;\n};","map":{"version":3,"sources":["/Users/nexle-user/Documents/dr-web-react/src/helper/common.js"],"names":["queryString","getQueryString","query","result","stringify","debounced","delay","fn","timerId","args","clearTimeout","setTimeout","capitalizeFirstLetter","stringText","charAt","toUpperCase","slice","getParameterByName","name","url","replace","regex","RegExp","results","exec","decodeURIComponent","isEquivalent","a","b","aProps","Object","getOwnPropertyNames","bProps","length","i","propName","objectToFormData","obj","form","namespace","fd","FormData","formKey","property","hasOwnProperty","File","append"],"mappings":"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","sourcesContent":["import queryString from 'query-string'\n\nexport const getQueryString = (query) => {\n  const result = queryString.stringify(\n    query,\n  )\n\n  if (!result) return ''\n  return `?${result}`\n}\n\nexport const debounced = (delay, fn) => {\n  let timerId\n\n  return (...args) => {\n    if (timerId) {\n      clearTimeout(timerId)\n    }\n\n    timerId = setTimeout(() => {\n      fn(...args)\n      timerId = null\n    }, delay)\n  }\n}\n\nexport const capitalizeFirstLetter = (stringText) => {\n  return stringText.charAt(0).toUpperCase() + stringText.slice(1)\n}\n\nexport const getParameterByName = (name, url) => {\n  if (!url) url = ''\n  // eslint-disable-next-line\n  name = name.replace(/[\\[\\]]/g, '\\\\$&')\n  let regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n    results = regex.exec(url)\n  if (!results) return null\n  if (!results[2]) return ''\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '))\n}\n\nexport const isEquivalent = (a, b) => {\n  // Create arrays of property names\n  let aProps = Object.getOwnPropertyNames(a)\n  let bProps = Object.getOwnPropertyNames(b)\n  // If number of properties is different,\n  // objects are not equivalent\n  if (aProps.length !== bProps.length) {\n    return false\n  }\n  for (let i = 0; i < aProps.length; i++) {\n    let propName = aProps[i]\n    // If values of same property are not equal,\n    // objects are not equivalent\n    if (a[propName] !== b[propName]) {\n      return false\n    }\n  }\n  // If we made it this far, objects\n  // are considered equivalent\n  return true\n}\n\nexport const objectToFormData = (obj, form, namespace) => {\n  let fd = form || new FormData();\n  let formKey;\n  // eslint-disable-next-line\n  for (let property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      if (namespace) {\n        formKey = namespace + '[' + property + ']';\n      } else {\n        formKey = property;\n      }\n\n      if (\n        typeof obj[property] === 'object' &&\n        // eslint-disable-next-line no-undef\n        !(obj[property] instanceof File)\n      ) {\n        objectToFormData(obj[property], fd, property);\n      } else {\n        fd.append(formKey, obj[property]);\n      }\n    }\n  }\n\n  return fd;\n};"]},"metadata":{},"sourceType":"module"}