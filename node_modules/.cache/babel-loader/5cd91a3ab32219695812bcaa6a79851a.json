{"ast":null,"code":"import { USER_DETAILS_UPDATE, USER_LOGIN, USER_RESET } from '../constants/memberTypes';\nimport store from '../store';\nimport serviceUser from \"../services/member\";\n/**\n  * Sign Up to Firebase\n  */\n\nexport function signUp(formData) {\n  const {\n    email,\n    password\n  } = formData;\n  const data = {\n    user: {\n      email,\n      password,\n      publicKey: email,\n      userType: 'patient'\n    }\n  };\n  return new Promise(async (resolve, reject) => {\n    serviceUser.signUp(data).then(result => {\n      console.log(result);\n\n      if (result) {\n        const {\n          user = {}\n        } = result;\n        store.dispatch({\n          type: USER_DETAILS_UPDATE,\n          data: { ...data.user,\n            ...user\n          }\n        });\n        return resolve({\n          isSuccess: true\n        });\n      } else {\n        return resolve({\n          isSuccess: false,\n          err: \"Something was wrong!\"\n        });\n      }\n    });\n  });\n}\n/**\n  * Login to Firebase with Email/Password\n  */\n\nexport function login(formData) {\n  const {\n    email,\n    password\n  } = formData;\n  const data = {\n    user: {\n      email,\n      password,\n      publicKey: email\n    }\n  };\n  return new Promise(async (resolve, reject) => {\n    serviceUser.Login(data).then(result => {\n      if (result) {\n        const {\n          user = {}\n        } = result;\n        store.dispatch({\n          type: USER_LOGIN,\n          data: { ...data.user,\n            ...user\n          }\n        });\n        return resolve({\n          isSuccess: true\n        });\n      } else {\n        return resolve({\n          isSuccess: false,\n          err: \"Something was wrong!\"\n        });\n      }\n    });\n  });\n}\n/**\n  * Reset Password\n  */\n\nexport function resetPassword(formData) {\n  const {\n    email\n  } = formData;\n}","map":{"version":3,"sources":["/Users/nexle-user/Documents/dr-web-react/src/actions/member.js"],"names":["USER_DETAILS_UPDATE","USER_LOGIN","USER_RESET","store","serviceUser","signUp","formData","email","password","data","user","publicKey","userType","Promise","resolve","reject","then","result","console","log","dispatch","type","isSuccess","err","login","Login","resetPassword"],"mappings":"AAEA,SAASA,mBAAT,EAA8BC,UAA9B,EAA0CC,UAA1C,QAA4D,0BAA5D;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA;;;;AAGA,OAAO,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AAC/B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBF,QAA5B;AACA,QAAMG,IAAI,GAAG;AACXC,IAAAA,IAAI,EAAE;AACJH,MAAAA,KADI;AAEJC,MAAAA,QAFI;AAGJG,MAAAA,SAAS,EAAEJ,KAHP;AAIJK,MAAAA,QAAQ,EAAE;AAJN;AADK,GAAb;AAQA,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5CX,IAAAA,WAAW,CAACC,MAAZ,CAAmBI,IAAnB,EAAyBO,IAAzB,CAA8BC,MAAM,IAAI;AACtCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAIA,MAAJ,EAAY;AACV,cAAM;AAAEP,UAAAA,IAAI,GAAG;AAAT,YAAgBO,MAAtB;AAEAd,QAAAA,KAAK,CAACiB,QAAN,CAAe;AACbC,UAAAA,IAAI,EAAErB,mBADO;AACcS,UAAAA,IAAI,EAAE,EAC/B,GAAGA,IAAI,CAACC,IADuB;AAE/B,eAAGA;AAF4B;AADpB,SAAf;AAQA,eAAOI,OAAO,CAAC;AAAEQ,UAAAA,SAAS,EAAE;AAAb,SAAD,CAAd;AACD,OAZD,MAYO;AAEL,eAAOR,OAAO,CAAC;AAAEQ,UAAAA,SAAS,EAAE,KAAb;AAAoBC,UAAAA,GAAG,EAAE;AAAzB,SAAD,CAAd;AACD;AACF,KAlBD;AAmBD,GApBM,CAAP;AAqBD;AAED;;;;AAGA,OAAO,SAASC,KAAT,CAAelB,QAAf,EAAyB;AAC9B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBF,QAA5B;AACA,QAAMG,IAAI,GAAG;AACXC,IAAAA,IAAI,EAAE;AACJH,MAAAA,KADI;AAEJC,MAAAA,QAFI;AAGJG,MAAAA,SAAS,EAAEJ;AAHP;AADK,GAAb;AAOA,SAAO,IAAIM,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5CX,IAAAA,WAAW,CAACqB,KAAZ,CAAkBhB,IAAlB,EAAwBO,IAAxB,CAA6BC,MAAM,IAAI;AACrC,UAAIA,MAAJ,EAAY;AACV,cAAM;AAAEP,UAAAA,IAAI,GAAG;AAAT,YAAgBO,MAAtB;AACAd,QAAAA,KAAK,CAACiB,QAAN,CAAe;AACbC,UAAAA,IAAI,EAAEpB,UADO;AACKQ,UAAAA,IAAI,EAAE,EACtB,GAAGA,IAAI,CAACC,IADc;AAEtB,eAAGA;AAFmB;AADX,SAAf;AAMA,eAAOI,OAAO,CAAC;AAAEQ,UAAAA,SAAS,EAAE;AAAb,SAAD,CAAd;AACD,OATD,MASO;AAEL,eAAOR,OAAO,CAAC;AAAEQ,UAAAA,SAAS,EAAE,KAAb;AAAoBC,UAAAA,GAAG,EAAE;AAAzB,SAAD,CAAd;AACD;AAEF,KAfD;AAgBD,GAjBM,CAAP;AAoBD;AAED;;;;AAGA,OAAO,SAASG,aAAT,CAAuBpB,QAAvB,EAAiC;AACtC,QAAM;AAAEC,IAAAA;AAAF,MAAYD,QAAlB;AAGD","sourcesContent":["\n\nimport { USER_DETAILS_UPDATE, USER_LOGIN, USER_RESET } from '../constants/memberTypes'\nimport store from '../store'\nimport serviceUser from \"../services/member\"\n/**\n  * Sign Up to Firebase\n  */\nexport function signUp(formData) {\n  const { email, password } = formData\n  const data = {\n    user: {\n      email,\n      password,\n      publicKey: email,\n      userType: 'patient'\n    }\n  }\n  return new Promise(async (resolve, reject) => {\n    serviceUser.signUp(data).then(result => {\n      console.log(result)\n      if (result) {\n        const { user = {} } = result\n\n        store.dispatch({\n          type: USER_DETAILS_UPDATE, data: {\n            ...data.user,\n            ...user\n          }\n        })\n\n\n        return resolve({ isSuccess: true })\n      } else {\n\n        return resolve({ isSuccess: false, err: \"Something was wrong!\" })\n      }\n    })\n  })\n}\n\n/**\n  * Login to Firebase with Email/Password\n  */\nexport function login(formData) {\n  const { email, password } = formData\n  const data = {\n    user: {\n      email,\n      password,\n      publicKey: email\n    }\n  }\n  return new Promise(async (resolve, reject) => {\n    serviceUser.Login(data).then(result => {\n      if (result) {\n        const { user = {} } = result\n        store.dispatch({\n          type: USER_LOGIN, data: {\n            ...data.user,\n            ...user\n          }\n        })\n        return resolve({ isSuccess: true })\n      } else {\n\n        return resolve({ isSuccess: false, err: \"Something was wrong!\" })\n      }\n\n    })\n  })\n\n\n}\n\n/**\n  * Reset Password\n  */\nexport function resetPassword(formData) {\n  const { email } = formData\n\n\n}\n\n"]},"metadata":{},"sourceType":"module"}