{"ast":null,"code":"var _jsxFileName = \"/Users/nexle-user/Documents/dr-web-react/src/components/CustomerTable/index.js\";\nimport React, { useContext, useState, useEffect, useRef } from 'react';\nimport { Input, Button, Popconfirm, Form } from 'antd';\nconst EditableContext = React.createContext();\n\nconst EditableFormRow = ({\n  index,\n  ...props\n}) => {\n  const [form] = Form.useForm();\n  return /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(EditableContext.Provider, {\n    value: form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }))));\n};\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef();\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    });\n  };\n\n  const save = async e => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record,\n        ...values\n      });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? /*#__PURE__*/React.createElement(Form.Item, {\n      style: {\n        margin: 0\n      },\n      name: dataIndex,\n      rules: [{\n        required: true,\n        message: `${title} is required.`\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      ref: inputRef,\n      onPressEnter: save,\n      onBlur: save,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"editable-cell-value-wrap\",\n      style: {\n        paddingRight: 24\n      },\n      onClick: toggleEdit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, children);\n  }\n\n  return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, restProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 10\n    }\n  }), childNode);\n};\n\nexport { EditableFormRow, EditableCell };","map":{"version":3,"sources":["/Users/nexle-user/Documents/dr-web-react/src/components/CustomerTable/index.js"],"names":["React","useContext","useState","useEffect","useRef","Input","Button","Popconfirm","Form","EditableContext","createContext","EditableFormRow","index","props","form","useForm","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","setFieldsValue","save","e","values","validateFields","errInfo","console","log","childNode","margin","required","message","paddingRight"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from 'react';\nimport { Input, Button, Popconfirm, Form } from 'antd';\n\nconst EditableContext = React.createContext();\n\n\nconst EditableFormRow = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef();\n  const form = useContext(EditableContext);\n\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({ [dataIndex]: record[dataIndex] });\n  };\n\n  const save = async e => {\n    try {\n      const values = await form.validateFields();\n\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{ margin: 0 }}\n        name={dataIndex}\n        rules={[\n          {\n            required: true,\n            message: `${title} is required.`,\n          },\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n        <div className=\"editable-cell-value-wrap\" style={{ paddingRight: 24 }} onClick={toggleEdit}>\n          {children}\n        </div>\n      );\n  }\n\n  return <td {...restProps}>{childNode}</td>;\n};\n\nexport {\n  EditableFormRow,\n  EditableCell\n}"]},"metadata":{},"sourceType":"module"}